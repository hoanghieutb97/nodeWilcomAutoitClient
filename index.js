const { io } = require("socket.io-client");
const fs = require("fs");
const path = require("path");
const http = require("http");
const https = require("https");
const { execFile } = require("child_process");
const os = require("os");
const querystring = require("querystring");

const socket = io("http://localhost:3999");
let currentTask = null;

const basePath = path.join(__dirname, "autoit Wilcom");
const imagePath = path.join(basePath, "design", "oke.png");
const exePath = path.join(basePath, "main.exe");

// ======= H√†m t·∫£i ·∫£nh th√¥ng minh (d√πng https.get) =======
function downloadImage(url, savePath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(savePath);
    const client = url.startsWith("https") ? https : http;

    client.get(url, (res) => {
      if (res.statusCode !== 200) {
        return reject(new Error(`HTTP ${res.statusCode}`));
      }

      res.pipe(file);
      file.on("finish", () => file.close(resolve));
    }).on("error", reject);
  });
}

// ======= K·∫øt n·ªëi t·ªõi server trung t√¢m =======
socket.on("connect", () => {
  console.log("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server");
  socket.emit("status", "available");
});

// ======= Nh·∫≠n task t·ª´ server =======
socket.on("task", async (task) => {
  console.log("üì• Nh·∫≠n task:", task);
  socket.emit("status", "busy");
  currentTask = task;

  const { urlImage, orderID } = task;

  try {
    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    fs.mkdirSync(path.dirname(imagePath), { recursive: true });

    // T·∫£i ·∫£nh
    await downloadImage(urlImage, imagePath);
    console.log("üñºÔ∏è ·∫¢nh ƒë√£ l∆∞u:", imagePath);

    // G·ªçi AutoIt exe
    execFile(exePath, [orderID], (err) => {
      if (err) {
        console.error("‚ùå L·ªói ch·∫°y exe:", err);
        sendResult(orderID, 0, "fail", err.message);
        socket.emit("done");
      } else {
        console.log("‚ñ∂Ô∏è AutoIt ƒëang x·ª≠ l√Ω...");
        // Ch·ªù AutoIt g·ªçi l·∫°i /notify
      }
    });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫£i ·∫£nh:", error);
    sendResult(orderID, 0, "fail", "download_error");
    socket.emit("done");
  }
});

// ======= Nh·∫≠n stitch t·ª´ AutoIt qua localhost:3458 =======
http.createServer((req, res) => {
  if (req.method === "POST" && req.url === "/notify") {
    let body = "";
    req.on("data", chunk => body += chunk);
    req.on("end", () => {
      const parsed = querystring.parse(body);
      const stitch = parseInt(parsed.data || "0");

      if (!currentTask) {
        console.error("‚ùå Kh√¥ng c√≥ task ƒë·ªÉ x·ª≠ l√Ω!");
        res.writeHead(400);
        return res.end("No task");
      }

      const { orderID } = currentTask;
      sendResult(orderID, stitch);
      socket.emit("done");
      currentTask = null;

      res.writeHead(200);
      res.end("OK");
    });
  } else if (req.method === "POST" && req.url === "/errWilcom") {
    let body = "";
    req.on("data", chunk => body += chunk);
    req.on("end", () => {
      const parsed = querystring.parse(body);
      const typeErr = parsed.data || "unknown_error";

      if (!currentTask) {
        console.error("‚ùå Kh√¥ng c√≥ task ƒë·ªÉ x·ª≠ l√Ω l·ªói!");
        res.writeHead(400);
        return res.end("No task");
      }

      const { orderID } = currentTask;
      sendErr(orderID, typeErr);
      socket.emit("done");
      currentTask = null;

      res.writeHead(200);
      res.end("ERR received");
    });
  }

  else {
    res.writeHead(404);
    res.end();
  }
}).listen(3458, () => {
  console.log("üì° Client ƒëang ch·ªù AutoIt g·ªçi /notify t·∫°i c·ªïng 3458");
});

// ======= G·ª≠i k·∫øt qu·∫£ v·ªÅ server trung t√¢m =======
function sendResult(orderID, stitch) {
  const data = JSON.stringify({ orderID, stitch});

  const req = http.request({
    hostname: "localhost",
    port: 3999,
    path: "/result",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": data.length
    }
  }, res => {
    console.log(`üì§ K·∫øt qu·∫£ ƒë√£ g·ª≠i (HTTP ${res.statusCode})`);
  });

  req.on("error", err => {
    console.error("‚ùå L·ªói g·ª≠i k·∫øt qu·∫£:", err);
  });

  req.write(data);
  req.end();
}

function sendErr(orderID, message) {
  const data = JSON.stringify({
    orderID,
    status: "fail",
    statusValue: message
  });

  const req = http.request({
    hostname: "http://192.168.1.194",
    port: 3999,
    path: "/runErr", // v·∫´n g·ª≠i v·ªÅ /result
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": data.length
    }
  }, res => {
    console.log(`üì§ L·ªói ƒë√£ g·ª≠i v·ªÅ server (HTTP ${res.statusCode})`);
  });

  req.on("error", err => {
    console.error("‚ùå L·ªói khi g·ª≠i l·ªói:", err);
  });

  req.write(data);
  req.end();
}
